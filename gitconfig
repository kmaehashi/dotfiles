[user]
  name = Kenichi Maehashi
  email = webmaster@kenichimaehashi.com
[core]
  excludesfile = ~/.gitignore
  quotepath = false
  precomposeunicode = true
[push]
  default = tracking
[pull]
  ff = only
[rebase]
  autosquash = true
  autostash = true
[credential]
  helper = cache --timeout 30000
[alias]
  gr = log --graph --date-order --pretty=format:'<%h> %ad %Cgreen%d%Creset %s  %Cblue[%an]%Creset' --all --date=short
  a = add
  d = diff
  dc = diff --cached
  co = checkout
  com = commit
  cam = commit --amend
  cp = cherry-pick
  br = branch
  m = merge
  s = show
  st = status
  stat = status
  ru = remote update
  rp = "! git remote prune $(git remote)"
  unst = reset HEAD
  uncom = reset --soft HEAD~
  wip = commit -m 'wip'
  fip = commit -m 'fixup! wip'
  init2 = commit -m 'initial commit' --allow-empty
  sui = submodule update --init --recursive

  # checkout as commmit
  cocom = "! f() { git checkout $(git rev-parse --verify HEAD); }; f"

  # hub (create pull-request): create a new pull-request
  cpr = pull-request

  # hub (push & pull-request): push HEAD as new branch and create pull-request
  ppr = "! f() { git push -u ${2:-origin} HEAD:refs/heads/${1} && hub pull-request -h ${2:-origin}/${1}; }; f"

  # hub (fetch pull-request): checkout pull request head branch
  fpr = pr checkout
  #fpr = "! f() { echo \"Fetching Pull-Request #${1} from ${2:-origin}\"; git fetch ${2:-origin} pull/$1/head:pull-$1 && git checkout pull-$1; }; f"

  # hub (GitHub commit): print GitHub URL for the given commit
  ghc = "! f() { hub browse -u -- \"commit/${1}\"; }; f"

  # readonly: mark the remote read-only
  readonly = "! f() { git remote set-url --push ${1} 'This repository is read only!'; }; f"
[init]
  defaultBranch = main
[commit]
  verbose = true
[diff]
  algorithm = histogram
[help]
  autocorrect = -1
[color]
  ui = auto
[url "https://"]
  insteadOf = git://
[hub]
  protocol = ssh
[include]
  path = ~/.gitconfig.local
