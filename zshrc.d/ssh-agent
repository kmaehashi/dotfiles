# ssh-agent
SSH_AGENT_CONFIG="${HOME}/.ssh/agent-config"
SSH_AGENT_KEYS_DIR="${HOME}/.ssh/agent-keys.d"

# SSH Agent Host:
# Keys under agent-keys.d are registered to the current agent.
# If agent is not running, start it automatically.
_ssh_agent_host_setup() {
  if [ -d "${SSH_AGENT_KEYS_DIR}" ]; then
    if [ -z "${SSH_AUTH_SOCK}" ]; then
      eval $(ssh-agent -s | grep -v '^echo ')
      ssh-add ${SSH_AGENT_KEYS_DIR}/*
    fi
  fi
}

# SSH Agent Client:
# If agent socket is available, append the socket to the configuration
# to share it between sessions.  Otherwise, load the agent path from
# configuration.  For non-host shell, set PRECMD hook to reload agent
# path from configuration.
_ssh_agent_client_setup() {
  if _test_ssh_agent_sock "${SSH_AUTH_SOCK}"; then
    _refresh_ssh_agent_sock "${SSH_AUTH_SOCK}"
  else
    unset SSH_AUTH_SOCK
    reload_ssh_agent
  fi

  if [ -z "${SSH_AGENT_PID}" ]; then
    PRECMD_HOOKS="_load_ssh_agent_sock ${PRECMD_HOOKS}"
  fi
}

# Check whether the given path is a valid SSH agent socket.
_test_ssh_agent_sock() {
  [ ! -z "${1}" -a -S "${1}" ]
}

# Refresh SOCKs list currently registered in the config.
# Optionally append the new SOCK when specified.
_refresh_ssh_agent_sock() {
  local MAYBE_NEW_SOCK="${1:-}"
  local DIRTY="no"
  local SOCKS=""
  for S in $(< "${SSH_AGENT_CONFIG}"); do
    if [ "${S}" = "${MAYBE_NEW_SOCK}" ]; then
      MAYBE_NEW_SOCK=""
    elif _test_ssh_agent_sock "${S}"; then
      SOCKS="${SOCKS} ${S}"
    else
      DIRTY="yes"
    fi
  done
  if [ ! -z "${MAYBE_NEW_SOCK}" ]; then
    SOCKS="${SOCKS} ${MAYBE_NEW_SOCK}"
    DIRTY="yes"
  fi
  if [ "${DIRTY}" = "yes" ]; then
    echo "${SOCKS}" > "${SSH_AGENT_CONFIG}"
  fi
}

# Load the first SOCK from config.
_load_ssh_agent_sock() {
  if ! _test_ssh_agent_sock "${SSH_AUTH_SOCK}"; then
    unset SSH_AUTH_SOCK
    for S in $(< "${SSH_AGENT_CONFIG}"); do
      export SSH_AUTH_SOCK="${S}"
      break
    done
  fi
}

# Clean up SOCK before exitting.
_cleanup_ssh_agent_sock() {
  if _test_ssh_agent_sock "${SSH_AUTH_SOCK}"; then
    rm "${SSH_AUTH_SOCK}"
  fi
  _refresh_ssh_agent_sock
}
EXIT_HOOKS="_cleanup_ssh_agent_sock ${EXIT_HOOKS}"

# Load after refresh.
reload_ssh_agent() {
  _refresh_ssh_agent_sock
  _load_ssh_agent_sock
}

# Entry points.
_ssh_agent_host_setup
_ssh_agent_client_setup
