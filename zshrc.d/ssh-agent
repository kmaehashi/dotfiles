# ssh-agent
SSH_AGENT_KEYS_DIR="${HOME}/.ssh/agent-keys.d"

# Create a list of ssh-agent sockets owned by the current user.
_list_sockets() {
  local SOCK
  for SOCK in /tmp/ssh-*/agent.*(N) /; do  # "/" is just a sentinel
    if [ -S "${SOCK}" -a -O "${SOCK}" ]; then
      echo "${SOCK}"
    fi
  done
}

# Discover existing SSH agent socket file and export SSH_AUTH_SOCK environment
# variable. The socket may be either of forwarded (sshd) or local (ssh-agent).
# If no socket files are available and local ssh-agent keys directory is
# configured, start a new instance of local ssh-agent.
_set_ssh_agent() {
  if [ ! -S "${SSH_AUTH_SOCK:-}" ]; then
    local SOCK="$(_list_sockets | head -n 1)"
    if [ ! -z "${SOCK}" ]; then
      export SSH_AUTH_SOCK="${SOCK}"
    elif [ -d "${SSH_AGENT_KEYS_DIR}" ]; then
      echo -n "Starting ssh-agent: "
      eval $(ssh-agent -s)
      ssh-add $(find ${SSH_AGENT_KEYS_DIR} -type f -or -type l)
    fi
  fi
}

# Remove stale ssh-agent socket files and call _set_ssh_agent to reinitialize
# the agent socket. You may need to call this manually when sockets goes
# stale e.g. when ssh connection being interrupted unexpectedly.
refresh_ssh_agent() {
  local SOCK
  local SOCK_BEFORE="${SSH_AUTH_SOCK:-(none)}"
  for SOCK in $(_list_sockets); do
    SSH_AUTH_SOCK="${SOCK}" ssh-add -l &> /dev/null
    if [ $? = 2 ]; then  # exit status 2 == failed to contact with the socket
      echo "Removing stale ssh-agent socket: ${SOCK}"
      rm "${SOCK}"
      rmdir "$(dirname "${SOCK}")"
    fi
  done

  _set_ssh_agent
  if [ "${SSH_AUTH_SOCK:-(none)}" != "${SOCK_BEFORE}" ]; then
    echo "SSH_AUTH_SOCK updated from ${SOCK_BEFORE} to ${SSH_AUTH_SOCK:-(none)}"
  fi
}

# When this is an SSH session, call _set_ssh_agent repeatedly in precmd hook
# to handle multiple connections. Otherwise just run the initialization once.
if [ -z "${SSH_TTY}" ]; then
  _set_ssh_agent
else
  # precmd() { _set_ssh_agent; }
  PRECMD_HOOKS="_set_ssh_agent ${PRECMD_HOOKS}"
fi
