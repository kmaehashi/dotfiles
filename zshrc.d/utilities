# Aliases
alias grep='grep --color=auto'
alias grepc='grep --color=force'
alias ls='ls --color=tty'
alias ll='ls -l --color=tty'
alias lla='ls -al --color=tty'
alias less='less --tabs=4 --LONG-PROMPT --RAW-CONTROL-CHARS --ignore-case'
alias g='git'
alias update-path='PATH="${PATH}"'
alias sshnp="ssh -oProxyCommand=none"
alias scpnp="scp -oProxyCommand=none"
alias watch="watch "  # allow using shell aliases in watch

# Parent directories
DOTS=".."
DOTS_DIR=".."
for (( DEPTH=0; DEPTH < 10; DEPTH++ )); do
  DOTS="${DOTS}."
  DOTS_DIR="${DOTS_DIR}/.."
  alias ${DOTS}="${DOTS_DIR}"
done
unset DOTS DOTS_DIR DEPTH

# "realpath" - print absolute path for the specified file or directory
function realpath() {
  for F in $@; do
    if [ ! -e "${F}" ]; then
      echo "${0}: ${F}: No such file"
    elif [[ ${F} == /* ]]; then
      echo "${F}"
    else
      echo "$(cd $(dirname ${F}) && echo ${PWD})/$(basename ${F})"
    fi
  done
}

# "runonce" - run the command until it succeeds
function runonce() {
  while :; do "$@" && return; done;
}

# "localtime" - convert epoch second into user-friendly datetime
# Using perl for cross-platform compatibility. Alternatives are:
#   - Linux: date --date="@xxxxxxxxxx"
#   - BSD:   date -r xxxxxxxxxx
function localtime() {
  perl -e '$t = localtime($ARGV[0]); print "$t\n"' ${1}
}

# "url_decode" - decode URL-escaped string
function url_decode() {
  python -c "import sys,urllib;print(urllib.unquote_plus(sys.stdin.read()))"
}

# "vif" - edit files whose name contain the given keyword, globbing recursively
function vif() {
  [ "${1}" != "" ] && "${EDITOR}" $(find . -name "*${1}*")
}

# "ff" - find files by name
function ff() {
  [ "${1}" != "" ] && find . -name "*${1}*"
}

# "rpmelt" - extract RPM package
function rpmelt() {
  rpm2cpio "${1}" | cpio -id
}

# "debmelt" - extract DEB package
function debmelt() {
  dpkg -x "${1}" .
  dpkg -e "${1}"
}

# "cleanroom" - run the given command in a cleanroom for environment-sensitive jobs such as rpmbuild
function cleanroom() {
  /usr/bin/env -i - HOME="$(echo ~$(whoami))" PATH="/sbin:/bin:/usr/sbin:/usr/bin" "$@"
}

# "telnets" - telnet over SSL
function telnets() {
  local HOST="${1}"; shift
  local PORT="${1}"; shift
  openssl s_client -servername "${HOST}" -connect "${HOST}:${PORT}" -crlf -quiet "$@"
}

# "pwssh" - SSH, password authentication preferred
function pwssh() {
  ssh -oPreferredAuthentications=keyboard-interactive,password,publickey,gssapi-with-mic,hostbased "${@}"
}

# "portscan" - Scan TCP/UDP ports exhaustively
function portscan() {
  # Note: -sS (TCP SYN) requires root, consider using -sT (TCP CONNECT).
  nmap -v -sS -sU -p1-65535 "$@"
}

# "xworkers" - xargs in specified concurrency
function xworkers() {
  WORKERS="${1}"; shift
  xargs -n 1 -P "${WORKERS}" "$@"
}

# "title" - declare window title
WINDOW_TITLE=""
title() {
  WINDOW_TITLE="$@"
}

# "enable_ccache"
enable_ccache() {
  export CC="ccache-gcc"
  export CXX="ccache-g++"
  export NVCC="ccache nvcc"
}

# "grepl" - grep for literal
grepl() {
    grep -r -F -e "\"$1\"" -e "'$1'" .
}
