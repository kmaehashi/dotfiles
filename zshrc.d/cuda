# CUDA
reset_cuda_path() {
  if [ -z "${CUDA_PATH}" ]; then
    CUDA_PATH="/usr/local/cuda"
  else
    echo "Using CUDA_PATH from the current environment: ${CUDA_PATH}"
  fi

  if [ -d "${CUDA_PATH}" ]; then
    export PATH="${CUDA_PATH}/bin:${PATH}"
    export LD_LIBRARY_PATH="${CUDA_PATH}/lib64:${LD_LIBRARY_PATH}"
  else
    unset CUDA_PATH
  fi
}
reset_cuda_path

# cudnnenv (pip install cudnnenv)
if [ -L ~/.cudnn/active ]; then
  export LD_LIBRARY_PATH=~/.cudnn/active/cuda/lib64:$LD_LIBRARY_PATH
  export CPATH=~/.cudnn/active/cuda/include:$CPATH
  export LIBRARY_PATH=~/.cudnn/active/cuda/lib64:$LIBRARY_PATH
fi

if which cudnnenv compctl; then
  function _cudnnenv () {
    local words completions
    read -cA words
    if [ "${#words}" -eq 2 ]; then
      completions="$(echo install,install-file,activate,uninstall,version,versions,deactivate,--help,--version | tr ',' '\n')"
    elif [ "${words[2]}" = "install" ]; then
      completions="$(cudnnenv versions | grep -v 'versions:' | tr -d '* ')"
    elif [ "${words[2]}" = "uninstall" -o "${words[2]}" = "activate" ]; then
      completions="$(ls ~/.cudnn/versions)"
    fi
    reply=(${(ps:\n:)completions})
  }
  compctl -K _cudnnenv cudnnenv
fi &> /dev/null

# ncclenv
if [ -L ~/.nccl/active ]; then
  export LD_LIBRARY_PATH=~/.nccl/active/cuda/lib64:$LD_LIBRARY_PATH
  export CPATH=~/.nccl/active/cuda/include:$CPATH
  export LIBRARY_PATH=~/.nccl/active/cuda/lib64:$LIBRARY_PATH
fi

# cupydisasm: disassembles CuPy kernel cache
function cupydisasm() {
  local FILENAME="$1"; shift
  local TMPFILE="$(mktemp)"
  tail -c +41 "${FILENAME}" > "${TMPFILE}"
  nvdisasm "$@" "${TMPFILE}"
  rm "${TMPFILE}"
}

function cupyobjdump() {
  local FILENAME="$1"; shift
  local TMPFILE="$(mktemp)"
  cupy-to-cuobj "${FILENAME}" > "${TMPFILE}"
  cuobjdump "$@" "${TMPFILE}"
  rm "${TMPFILE}"
}

function cupy-to-cuobj() {
  tail -c +41 "${1}"
}

# cupy-gdb: cuda-gdb to debug CuPy kernels
function cupy-gdb() {
  CUPY_CUDA_COMPILE_WITH_DEBUG=1 CUPY_CACHE_SAVE_CUDA_SOURCE=1 cuda-gdb --directory ~/.cupy/kernel_cache "$@"
}

# unload_cuda_driver: unloads CUDA driver online
function unload_cuda_driver() {
  for MOD in nvidia_drm nvidia_uvm nvidia_modeset nvidia; do
    sudo rmmod "${MOD}"
  done
}
